generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  code        String  @unique
  name        String
  description String?
  parentCode  String?
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false)
  isParent    Boolean @default(false)
  metadata    Json    @default("{}")

  parent      Entity?     @relation("EntityToEntity", fields: [parentCode], references: [code])
  subEntities Entity[]    @relation("EntityToEntity")
  references  Reference[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reference {
  code        String  @unique
  name        String
  entityCode  String
  description String?
  parentCode  String?
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false)
  isParent    Boolean @default(false)
  metadata    Json    @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  entity        Entity      @relation(fields: [entityCode], references: [code])
  parent        Reference?  @relation("ReferenceToReference", fields: [parentCode], references: [code])
  subReferences Reference[] @relation("ReferenceToReference")
  postTypes     Post[]      @relation("PostToReference")
  skillTypes    Skill[]     @relation("SkillToReference")
  userRoles     User[]      @relation("UserToReference-role")
}

model User {
  id                  String    @id @default(uuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  password            String?
  roleCode            String?
  image               String?
  isTwoFactorEnabled  Boolean   @default(false)
  isTwoFactorVerified Boolean?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @default(now()) @updatedAt

  posts    Post[]
  accounts Account[]
  role     Reference? @relation("UserToReference-role", fields: [roleCode], references: [code])
}

model VerificationToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime

  @@unique([email, token])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Post {
  id          String   @id @default(uuid())
  authorId    String
  typeCode    String
  title       String
  description String
  thumbnail   String
  slug        String   @unique
  body        String
  tags        String[]
  isFeatured  Boolean  @default(false)
  isPublished Boolean  @default(false)
  metadata    Json     @default("{}")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  author User      @relation(fields: [authorId], references: [id])
  type   Reference @relation("PostToReference", fields: [typeCode], references: [code])
}

model Skill {
  id         String  @id @default(uuid())
  title      String
  logo       String
  typeCode   String
  isFavorite Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  type Reference @relation("SkillToReference", fields: [typeCode], references: [code])
}

model Experience {
  id          String   @id @default(uuid())
  title       String
  description String
  tags        String[]
  start       DateTime @db.Date
  end         DateTime @db.Date
  order       Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Visitors {
  id        String   @id @default(uuid())
  ip        String
  country   String
  city      String
  region    String
  createdAt DateTime @default(now())

  @@unique([ip, country, city, region])
}
